<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.icutool.mapper.BlogArticlesMapper">

    <resultMap type="cn.icutool.domain.entity.BlogArticles" id="BlogArticlesMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="authorUid" column="author_uid" jdbcType="INTEGER"/>
        <result property="categoryId" column="category_id" jdbcType="INTEGER"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="createdAt" column="created_at" jdbcType="TIMESTAMP"/>
        <result property="updatedAt" column="updated_at" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="articleResultMap" type="cn.icutool.domain.dto.BlogDTO">
        <id property="id" column="article_id" />
        <result property="title" column="article_title" />
        <result property="authorName" column="author_Name" />
        <result property="content" column="article_content" />
        <result property="createdAt" column="article_created_at" />
        <result property="updatedAt" column="article_updated_at" />
        <result property="category" column="category_name" />
        <collection property="tags" ofType="java.lang.String" select="queryTagsByArticleId" column="article_id" />
    </resultMap>

    <resultMap id="articlePageResultMap" type="cn.icutool.domain.dto.BlogDTO">
        <id property="id" column="article_id" />
        <result property="title" column="article_title" />
        <result property="authorName" column="author_Name" />
        <result property="content" column="article_content" />
        <result property="createdAt" column="article_created_at" />
        <result property="updatedAt" column="article_updated_at" />
        <result property="category" column="category_name" />
    </resultMap>

    <select id="queryTagsByArticleId" resultType="java.lang.String">
        SELECT t.name
        FROM blog_article_tags at
        LEFT JOIN blog_tags t ON at.tag_id = t.id
        WHERE at.article_id = #{articleId}
    </select>

    <!--查询单个-->
    <select id="queryById" resultMap="BlogArticlesMap">
        select
        id, title, author_uid, category_id, content, created_at, updated_at
        from blog_articles
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BlogArticlesMap">
        select
        id, title, author_uid, category_id, content, created_at, updated_at
        from blog_articles
        <where>
            <if test="blogArticles.id != null">
                and id = #{blogArticles.id}
            </if>
            <if test="blogArticles.title != null and blogArticles.title != ''">
                and title = #{blogArticles.title}
            </if>
            <if test="blogArticles.authorUid != null">
                and author_uid = #{blogArticles.authorUid}
            </if>
            <if test="blogArticles.categoryId != null">
                and category_id = #{blogArticles.categoryId}
            </if>
            <if test="blogArticles.content != null and blogArticles.content != ''">
                and content = #{blogArticles.content}
            </if>
            <if test="blogArticles.createdAt != null">
                and created_at = #{blogArticles.createdAt}
            </if>
            <if test="blogArticles.updatedAt != null">
                and updated_at = #{blogArticles.updatedAt}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from blog_articles
        <where>
            <if test="keyword != null and keyword != ''">
                and title like CONCAT('%',#{keyword},'%')
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into blog_articles(title, author_uid, category_id, content, created_at, updated_at)
        values (#{title}, #{authorUid}, #{categoryId}, #{content}, #{createdAt}, #{updatedAt})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into blog_articles(title, author_uid, category_id, content, created_at, updated_at)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.title}, #{entity.authorUid}, #{entity.categoryId}, #{entity.content}, #{entity.createdAt}, #{entity.updatedAt})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into blog_articles(title, author_uid, category_id, content, created_at, updated_at)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.title}, #{entity.authorUid}, #{entity.categoryId}, #{entity.content}, #{entity.createdAt}, #{entity.updatedAt})
        </foreach>
        on duplicate key update
        title = values(title)
        author_uid = values(author_uid)
        category_id = values(category_id)
        content = values(content)
        created_at = values(created_at)
        updated_at = values(updated_at)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update blog_articles
        <set>
            <if test="title != null and title != ''">
                title = #{title},
            </if>
            <if test="authorUid != null">
                author_uid = #{authorUid},
            </if>
            <if test="categoryId != null">
                category_id = #{categoryId},
            </if>
            <if test="content != null and content != ''">
                content = #{content},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from blog_articles where id = #{id}
    </delete>

    <select id="queryOne" resultMap="articleResultMap">
        SELECT
        a.id AS article_id,
        su.nick_name AS author_Name,
        a.title AS article_title,
        a.content AS article_content,
        c.id AS category_id,
        c.name AS category_name,
        a.created_at AS article_created_at,
        a.updated_at AS article_updated_at
        FROM
        blog_articles a
        LEFT JOIN
        blog_categories c ON a.category_id = c.id
        LEFT JOIN
        sys_user su ON a.author_uid = su.id
        WHERE a.id = #{id}
    </select>

    <select id="queryPageByLimit" resultMap="articlePageResultMap">
        SELECT
        a.id AS article_id,
        su.nick_name AS author_Name,
        a.title AS article_title,
        a.content AS article_content,
        c.id AS category_id,
        c.name AS category_name,
        a.created_at AS article_created_at,
        a.updated_at AS article_updated_at
        FROM
        blog_articles a
        LEFT JOIN
        blog_categories c ON a.category_id = c.id
        LEFT JOIN
        sys_user su ON a.author_uid = su.id
        <where>
            <if test="keyword != null and keyword != ''">
                and title like CONCAT('%',#{keyword},'%')
            </if>
        </where>
        order by a.created_at desc
        limit #{pageNum},#{pageSize}
    </select>

    <select id="selectNext" resultType="cn.icutool.domain.dto.ArticleSwitch">
        select id,title from blog_articles where created_at &lt; #{time} order by created_at desc limit 1
    </select>

    <select id="selectPrev" resultType="cn.icutool.domain.dto.ArticleSwitch">
        select id,title from blog_articles where created_at > #{time} order by created_at asc limit 1
    </select>
</mapper>

